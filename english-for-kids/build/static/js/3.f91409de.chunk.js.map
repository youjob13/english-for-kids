{"version":3,"sources":["shared/interfaces/api-models.ts","components/Statistics/StatisticsTable/TableCell/TableCell.tsx","components/Statistics/StatisticsTable/TableHeader/TableHeader.tsx","shared/globalVariables.ts","shared/helpersFunction/sortTable.ts","components/Statistics/StatisticsTable/StatisticsTable.tsx","components/Statistics/Statistics.tsx"],"names":["SortingTypes","TABLE_CELL_STYLES","classes","tableCell","TABLE_ROW_STYLES","tableRow","TableCell","index","word","category","wordName","translation","asked","train","hit","wrong","wrongPercent","className","capitalizeWord","TableHeader","content","selectSorting","selectedSortingType","type","TABLE_TITLE_ACTIVE_STYLES","TABLE_TITLE_STYLES","onClick","name","tableHeaders","CATEGORY","WORD","TRANSLATION","ASKED","TRAIN","HIT","WRONG","WRONG_PERCENT","sortTable","unsortedList","sortingType","sortBy","sortFromTop","sort","a","b","prevName","toLowerCase","nextName","StatisticsTable","cardsData","useSelector","state","cardsReducer","cards","statisticsData","statisticReducer","useState","setSortingType","statisticsParams","map","cardsDataItem","Object","keys","toString","values","card","askedAnswers","trueAnswers","parsedData","JSON","parse","translate","askedCounter","trainCounter","trueAnswerCounter","falseAnswerCounter","Math","floor","flat","sortingTypeName","TABLE_STYLES","tableHeaderContent","TABLE_BODY_STYLES","elem","Statistics","dispatch","useDispatch","useEffect","getStatistics","STATISTICS_HEADER_STYLES","Title","BUTTONS_WRAPPER_STYLES","BUTTON_STYLES","TABLE_WRAPPER_STYLES"],"mappings":"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","file":"static/js/3.f91409de.chunk.js","sourcesContent":["export interface RouteParams {\n  category: string;\n}\n\nexport interface ITableHeaderData {\n  type: SortingTypes;\n  name: string;\n}\n\nexport interface ITableHeader {\n  content: ITableHeaderData;\n  selectSorting: (sortingTypeName: string) => void;\n  selectedSortingType: string;\n}\n\nexport interface IWordStatisticData {\n  category: string;\n  wordName: string;\n  translation: string;\n  asked: number;\n  train: number;\n  hit: number;\n  wrong: number;\n  wrongPercent: number;\n}\n\nexport enum SortingTypes {\n  CATEGORY = 'CATEGORY',\n  WORD = 'WORD',\n  TRANSLATION = 'TRANSLATION',\n  ASKED = 'ASKED',\n  TRAIN = 'TRAIN',\n  HIT = 'HIT',\n  WRONG = 'WRONG',\n  WRONG_PERCENT = 'WRONG_PERCENT',\n}\n","import React, { ReactElement } from 'react';\nimport classes from '../../statistics.module.scss';\nimport capitalizeWord from '../../../../shared/helpersFunction/capitalizeWord';\nimport { ITableCellProps } from '../../../../shared/interfaces/props-models';\n\nconst TABLE_CELL_STYLES = classes.tableCell;\nconst TABLE_ROW_STYLES = classes.tableRow;\n\nconst TableCell = ({ index, word }: ITableCellProps): ReactElement => {\n  const {\n    category,\n    wordName,\n    translation,\n    asked,\n    train,\n    hit,\n    wrong,\n    wrongPercent,\n  } = word;\n\n  return (\n    <tr className={TABLE_ROW_STYLES}>\n      <td className={TABLE_CELL_STYLES}>{index}</td>\n      <td className={TABLE_CELL_STYLES}>{capitalizeWord(category)}</td>\n      <td className={TABLE_CELL_STYLES}>{capitalizeWord(wordName)}</td>\n      <td className={TABLE_CELL_STYLES}>{capitalizeWord(translation)}</td>\n      <td className={TABLE_CELL_STYLES}>{asked || 0}</td>\n      <td className={TABLE_CELL_STYLES}>{train || 0}</td>\n      <td className={TABLE_CELL_STYLES}>{hit || 0}</td>\n      <td className={TABLE_CELL_STYLES}>{wrong || 0}</td>\n      <td className={TABLE_CELL_STYLES}>{wrongPercent || 0}%</td>\n    </tr>\n  );\n};\n\nexport default TableCell;\n","import React, { ReactElement } from 'react';\nimport {\n  TABLE_TITLE_ACTIVE_STYLES,\n  TABLE_TITLE_STYLES,\n} from '../../../../shared/stylesVariables';\nimport { ITableHeader } from '../../../../shared/interfaces/api-models';\nimport capitalizeWord from '../../../../shared/helpersFunction/capitalizeWord';\n\nconst TableHeader = ({\n  content,\n  selectSorting,\n  selectedSortingType,\n}: ITableHeader): ReactElement => {\n  const onTableHeaderClick = () => {\n    selectSorting(content.type);\n  };\n\n  return (\n    <th\n      className={\n        selectedSortingType === content.type\n          ? TABLE_TITLE_ACTIVE_STYLES\n          : TABLE_TITLE_STYLES\n      }\n      onClick={onTableHeaderClick}\n    >\n      {capitalizeWord(content.name)}\n    </th>\n  );\n};\n\nexport default TableHeader;\n","import { ITableHeaderData, SortingTypes } from './interfaces/api-models';\n\nconst tableHeaders: ITableHeaderData[] = [\n  {\n    type: SortingTypes.CATEGORY,\n    name: 'category',\n  },\n  {\n    type: SortingTypes.WORD,\n    name: 'word',\n  },\n  {\n    type: SortingTypes.TRANSLATION,\n    name: 'translation',\n  },\n  {\n    type: SortingTypes.ASKED,\n    name: 'asked',\n  },\n  {\n    type: SortingTypes.TRAIN,\n    name: 'train',\n  },\n  {\n    type: SortingTypes.HIT,\n    name: 'hit',\n  },\n  {\n    type: SortingTypes.WRONG,\n    name: 'wrong',\n  },\n  {\n    type: SortingTypes.WRONG_PERCENT,\n    name: 'wrong percent',\n  },\n];\nexport default tableHeaders;\n","import { IWordStatisticData, SortingTypes } from '../interfaces/api-models';\n\nconst sortTable = (\n  unsortedList: IWordStatisticData[],\n  sortingType: { sortBy: string; sortFromTop: boolean }\n): IWordStatisticData[] => {\n  switch (sortingType.sortBy) {\n    case SortingTypes.CATEGORY: {\n      if (sortingType.sortFromTop) {\n        // TODO: optimize\n        return unsortedList.sort((a, b) => {\n          const prevName = a.category.toLowerCase();\n          const nextName = b.category.toLowerCase();\n          if (prevName < nextName) {\n            return -1;\n          }\n          if (prevName > nextName) {\n            return 1;\n          }\n          return 0;\n        });\n      }\n      return unsortedList.sort((a, b) => {\n        const prevName = a.category.toLowerCase();\n        const nextName = b.category.toLowerCase();\n        if (prevName > nextName) {\n          return -1;\n        }\n        if (prevName < nextName) {\n          return 1;\n        }\n        return 0;\n      });\n    }\n    case SortingTypes.WORD: {\n      if (sortingType.sortFromTop) {\n        // TODO: optimize\n        return unsortedList.sort((a, b) => {\n          const prevName = a.wordName.toLowerCase();\n          const nextName = b.wordName.toLowerCase();\n          if (prevName < nextName) {\n            return -1;\n          }\n          if (prevName > nextName) {\n            return 1;\n          }\n          return 0;\n        });\n      }\n      return unsortedList.sort((a, b) => {\n        const prevName = a.wordName.toLowerCase();\n        const nextName = b.wordName.toLowerCase();\n        if (prevName > nextName) {\n          return -1;\n        }\n        if (prevName < nextName) {\n          return 1;\n        }\n        return 0;\n      });\n    }\n    case SortingTypes.TRANSLATION: {\n      if (sortingType.sortFromTop) {\n        // TODO: optimize\n        return unsortedList.sort((a, b) => {\n          const prevName = a.translation.toLowerCase();\n          const nextName = b.translation.toLowerCase();\n          if (prevName < nextName) {\n            return -1;\n          }\n          if (prevName > nextName) {\n            return 1;\n          }\n          return 0;\n        });\n      }\n      return unsortedList.sort((a, b) => {\n        const prevName = a.translation.toLowerCase();\n        const nextName = b.translation.toLowerCase();\n        if (prevName > nextName) {\n          return -1;\n        }\n        if (prevName < nextName) {\n          return 1;\n        }\n        return 0;\n      });\n    }\n    case SortingTypes.ASKED: {\n      return unsortedList.sort((a, b) =>\n        sortingType.sortFromTop ? a.asked - b.asked : b.asked - a.asked\n      );\n    }\n    case SortingTypes.TRAIN: {\n      return unsortedList.sort((a, b) =>\n        sortingType.sortFromTop ? a.train - b.train : b.train - a.train\n      );\n    }\n    case SortingTypes.HIT: {\n      return unsortedList.sort((a, b) =>\n        sortingType.sortFromTop ? a.hit - b.hit : b.hit - a.hit\n      );\n    }\n    case SortingTypes.WRONG: {\n      return unsortedList.sort((a, b) =>\n        sortingType.sortFromTop ? a.wrong - b.wrong : b.wrong - a.wrong\n      );\n    }\n    case SortingTypes.WRONG_PERCENT: {\n      return unsortedList.sort((a, b) =>\n        sortingType.sortFromTop\n          ? a.wrongPercent - b.wrongPercent\n          : b.wrongPercent - a.wrongPercent\n      );\n    }\n    default: {\n      return unsortedList;\n    }\n  }\n};\n\nexport default sortTable;\n","import React, { ReactElement, useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport TableCell from './TableCell/TableCell';\nimport { IWordStatisticData } from '../../../shared/interfaces/api-models';\nimport {\n  CardsReducerType,\n  StatisticReducerType,\n} from '../../../shared/interfaces/store-models';\nimport { ICardItem } from '../../../shared/interfaces/cards-models';\nimport capitalizeWord from '../../../shared/helpersFunction/capitalizeWord';\nimport TableHeader from './TableHeader/TableHeader';\nimport {\n  TABLE_BODY_STYLES,\n  TABLE_ROW_STYLES,\n  TABLE_STYLES,\n  TABLE_TITLE_STYLES,\n} from '../../../shared/stylesVariables';\nimport tableHeaders from '../../../shared/globalVariables';\nimport sortTable from '../../../shared/helpersFunction/sortTable';\n\nconst calcWrongPercent = (\n  askedAnswers: number,\n  trueAnswers: number\n): number => {\n  return Math.floor((askedAnswers * 100) / trueAnswers);\n};\n\nconst StatisticsTable = (): ReactElement => {\n  const { cards: cardsData } = useSelector(\n    (state: CardsReducerType) => state.cardsReducer\n  );\n  const { statisticsData } = useSelector(\n    (state: StatisticReducerType) => state.statisticReducer\n  );\n  const [sortingType, setSortingType] = useState({\n    sortBy: '',\n    sortFromTop: false,\n  });\n\n  const statisticsParams: IWordStatisticData[] = cardsData\n    .map((cardsDataItem) => {\n      const category = Object.keys(cardsDataItem).toString();\n      const cards: ICardItem[] = Object.values(cardsDataItem)[0];\n\n      return cards.map((card) => {\n        const parsedData =\n          statisticsData[capitalizeWord(card.name)] &&\n          JSON.parse(statisticsData[capitalizeWord(card.name)]);\n\n        return {\n          wordName: card.name,\n          translation: card.translate,\n          asked: (parsedData && parsedData.askedCounter) || 0,\n          train: (parsedData && parsedData.trainCounter) || 0, // TODO: to do rename\n          hit: (parsedData && parsedData.trueAnswerCounter) || 0,\n          wrong: (parsedData && parsedData.falseAnswerCounter) || 0,\n          wrongPercent:\n            (parsedData &&\n              calcWrongPercent(\n                parsedData.falseAnswerCounter,\n                parsedData.trueAnswerCounter\n              )) ||\n            0,\n          category,\n        };\n      });\n    })\n    .flat();\n\n  const selectSorting = (sortingTypeName: string) => {\n    setSortingType({\n      sortBy: sortingTypeName,\n      sortFromTop: !sortingType.sortFromTop, // TODO: to do nice sort\n    });\n  };\n\n  return (\n    <table className={TABLE_STYLES}>\n      <thead>\n        <tr className={TABLE_ROW_STYLES}>\n          <th className={TABLE_TITLE_STYLES}>№</th>\n          {tableHeaders.map((tableHeaderContent) => (\n            <TableHeader\n              key={tableHeaderContent.type}\n              selectedSortingType={sortingType.sortBy} // TODO: to do smth\n              content={tableHeaderContent}\n              selectSorting={selectSorting}\n            />\n          ))}\n        </tr>\n      </thead>\n      <tbody className={TABLE_BODY_STYLES}>\n        {sortTable(statisticsParams, sortingType).map((elem, index) => (\n          <TableCell key={index.toString()} word={elem} index={index + 1} />\n        ))}\n      </tbody>\n    </table>\n  );\n};\n\nexport default StatisticsTable;\n","import React, { ReactElement, useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport StatisticsTable from './StatisticsTable/StatisticsTable';\nimport Title from '../../shared/baseComponents/Title/Title';\nimport {\n  BUTTON_STYLES,\n  BUTTONS_WRAPPER_STYLES,\n  STATISTICS_HEADER_STYLES,\n  TABLE_WRAPPER_STYLES,\n} from '../../shared/stylesVariables';\nimport { getStatistics } from '../../store/statisticSlice';\n\nconst Statistics = (): ReactElement => {\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(getStatistics());\n  }, []);\n\n  return (\n    <>\n      <div className={STATISTICS_HEADER_STYLES}>\n        <Title>Statistics</Title>\n        <div className={BUTTONS_WRAPPER_STYLES}>\n          <button className={BUTTON_STYLES} type=\"button\">\n            Repeat difficult words\n          </button>\n          <button className={BUTTON_STYLES} type=\"button\">\n            Clear list\n          </button>\n        </div>\n      </div>\n      <div className={TABLE_WRAPPER_STYLES}>\n        <StatisticsTable />\n      </div>\n    </>\n  );\n};\n\nexport default Statistics;\n"],"sourceRoot":""}