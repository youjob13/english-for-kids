{"version":3,"sources":["shared/interfaces/api-models.ts","components/Statistics/StatisticsTable/TableCell/TableCell.tsx","components/Statistics/StatisticsTable/TableHeader/TableHeader.tsx","shared/globalVariables.ts","shared/helpersFunction/sortTable.ts","components/Statistics/StatisticsTable/StatisticsTable.tsx","components/Statistics/Statistics.tsx"],"names":["SortingTypes","TABLE_CELL_STYLES","classes","tableCell","TABLE_ROW_STYLES","tableRow","TableCell","index","word","category","wordName","translation","asked","train","hit","wrong","wrongPercent","className","capitalizeWord","TableHeader","content","selectSorting","selectedSortingType","type","TABLE_TITLE_ACTIVE_STYLES","TABLE_TITLE_STYLES","onClick","name","tableHeaders","CATEGORY","WORD","TRANSLATION","ASKED","TRAIN","HIT","WRONG","WRONG_PERCENT","sortTable","unsortedList","sortingType","sortBy","sortFromTop","sort","a","b","prevName","toLowerCase","nextName","StatisticsTable","cardsData","useSelector","state","cardsReducer","cards","statisticsData","statisticReducer","useState","setSortingType","statisticsParams","map","cardsDataItem","Object","keys","toString","values","card","askedAnswers","trueAnswers","parsedData","JSON","parse","translate","askedCounter","trainCounter","trueAnswerCounter","falseAnswerCounter","Math","floor","flat","sortingTypeName","TABLE_STYLES","tableHeaderContent","TABLE_BODY_STYLES","elem","Statistics","dispatch","useDispatch","useEffect","getStatistics","STATISTICS_HEADER_STYLES","Title","BUTTONS_WRAPPER_STYLES","BUTTON_STYLES","TABLE_WRAPPER_STYLES"],"mappings":"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","file":"static/js/3.f91409de.chunk.js","sourcesContent":["export interface RouteParams {\r\n  category: string;\r\n}\r\n\r\nexport interface ITableHeaderData {\r\n  type: SortingTypes;\r\n  name: string;\r\n}\r\n\r\nexport interface ITableHeader {\r\n  content: ITableHeaderData;\r\n  selectSorting: (sortingTypeName: string) => void;\r\n  selectedSortingType: string;\r\n}\r\n\r\nexport interface IWordStatisticData {\r\n  category: string;\r\n  wordName: string;\r\n  translation: string;\r\n  asked: number;\r\n  train: number;\r\n  hit: number;\r\n  wrong: number;\r\n  wrongPercent: number;\r\n}\r\n\r\nexport enum SortingTypes {\r\n  CATEGORY = 'CATEGORY',\r\n  WORD = 'WORD',\r\n  TRANSLATION = 'TRANSLATION',\r\n  ASKED = 'ASKED',\r\n  TRAIN = 'TRAIN',\r\n  HIT = 'HIT',\r\n  WRONG = 'WRONG',\r\n  WRONG_PERCENT = 'WRONG_PERCENT',\r\n}\r\n","import React, { ReactElement } from 'react';\r\nimport classes from '../../statistics.module.scss';\r\nimport capitalizeWord from '../../../../shared/helpersFunction/capitalizeWord';\r\nimport { ITableCellProps } from '../../../../shared/interfaces/props-models';\r\n\r\nconst TABLE_CELL_STYLES = classes.tableCell;\r\nconst TABLE_ROW_STYLES = classes.tableRow;\r\n\r\nconst TableCell = ({ index, word }: ITableCellProps): ReactElement => {\r\n  const {\r\n    category,\r\n    wordName,\r\n    translation,\r\n    asked,\r\n    train,\r\n    hit,\r\n    wrong,\r\n    wrongPercent,\r\n  } = word;\r\n\r\n  return (\r\n    <tr className={TABLE_ROW_STYLES}>\r\n      <td className={TABLE_CELL_STYLES}>{index}</td>\r\n      <td className={TABLE_CELL_STYLES}>{capitalizeWord(category)}</td>\r\n      <td className={TABLE_CELL_STYLES}>{capitalizeWord(wordName)}</td>\r\n      <td className={TABLE_CELL_STYLES}>{capitalizeWord(translation)}</td>\r\n      <td className={TABLE_CELL_STYLES}>{asked || 0}</td>\r\n      <td className={TABLE_CELL_STYLES}>{train || 0}</td>\r\n      <td className={TABLE_CELL_STYLES}>{hit || 0}</td>\r\n      <td className={TABLE_CELL_STYLES}>{wrong || 0}</td>\r\n      <td className={TABLE_CELL_STYLES}>{wrongPercent || 0}%</td>\r\n    </tr>\r\n  );\r\n};\r\n\r\nexport default TableCell;\r\n","import React, { ReactElement } from 'react';\r\nimport {\r\n  TABLE_TITLE_ACTIVE_STYLES,\r\n  TABLE_TITLE_STYLES,\r\n} from '../../../../shared/stylesVariables';\r\nimport { ITableHeader } from '../../../../shared/interfaces/api-models';\r\nimport capitalizeWord from '../../../../shared/helpersFunction/capitalizeWord';\r\n\r\nconst TableHeader = ({\r\n  content,\r\n  selectSorting,\r\n  selectedSortingType,\r\n}: ITableHeader): ReactElement => {\r\n  const onTableHeaderClick = () => {\r\n    selectSorting(content.type);\r\n  };\r\n\r\n  return (\r\n    <th\r\n      className={\r\n        selectedSortingType === content.type\r\n          ? TABLE_TITLE_ACTIVE_STYLES\r\n          : TABLE_TITLE_STYLES\r\n      }\r\n      onClick={onTableHeaderClick}\r\n    >\r\n      {capitalizeWord(content.name)}\r\n    </th>\r\n  );\r\n};\r\n\r\nexport default TableHeader;\r\n","import { ITableHeaderData, SortingTypes } from './interfaces/api-models';\r\n\r\nconst tableHeaders: ITableHeaderData[] = [\r\n  {\r\n    type: SortingTypes.CATEGORY,\r\n    name: 'category',\r\n  },\r\n  {\r\n    type: SortingTypes.WORD,\r\n    name: 'word',\r\n  },\r\n  {\r\n    type: SortingTypes.TRANSLATION,\r\n    name: 'translation',\r\n  },\r\n  {\r\n    type: SortingTypes.ASKED,\r\n    name: 'asked',\r\n  },\r\n  {\r\n    type: SortingTypes.TRAIN,\r\n    name: 'train',\r\n  },\r\n  {\r\n    type: SortingTypes.HIT,\r\n    name: 'hit',\r\n  },\r\n  {\r\n    type: SortingTypes.WRONG,\r\n    name: 'wrong',\r\n  },\r\n  {\r\n    type: SortingTypes.WRONG_PERCENT,\r\n    name: 'wrong percent',\r\n  },\r\n];\r\nexport default tableHeaders;\r\n","import { IWordStatisticData, SortingTypes } from '../interfaces/api-models';\r\n\r\nconst sortTable = (\r\n  unsortedList: IWordStatisticData[],\r\n  sortingType: { sortBy: string; sortFromTop: boolean }\r\n): IWordStatisticData[] => {\r\n  switch (sortingType.sortBy) {\r\n    case SortingTypes.CATEGORY: {\r\n      if (sortingType.sortFromTop) {\r\n        // TODO: optimize\r\n        return unsortedList.sort((a, b) => {\r\n          const prevName = a.category.toLowerCase();\r\n          const nextName = b.category.toLowerCase();\r\n          if (prevName < nextName) {\r\n            return -1;\r\n          }\r\n          if (prevName > nextName) {\r\n            return 1;\r\n          }\r\n          return 0;\r\n        });\r\n      }\r\n      return unsortedList.sort((a, b) => {\r\n        const prevName = a.category.toLowerCase();\r\n        const nextName = b.category.toLowerCase();\r\n        if (prevName > nextName) {\r\n          return -1;\r\n        }\r\n        if (prevName < nextName) {\r\n          return 1;\r\n        }\r\n        return 0;\r\n      });\r\n    }\r\n    case SortingTypes.WORD: {\r\n      if (sortingType.sortFromTop) {\r\n        // TODO: optimize\r\n        return unsortedList.sort((a, b) => {\r\n          const prevName = a.wordName.toLowerCase();\r\n          const nextName = b.wordName.toLowerCase();\r\n          if (prevName < nextName) {\r\n            return -1;\r\n          }\r\n          if (prevName > nextName) {\r\n            return 1;\r\n          }\r\n          return 0;\r\n        });\r\n      }\r\n      return unsortedList.sort((a, b) => {\r\n        const prevName = a.wordName.toLowerCase();\r\n        const nextName = b.wordName.toLowerCase();\r\n        if (prevName > nextName) {\r\n          return -1;\r\n        }\r\n        if (prevName < nextName) {\r\n          return 1;\r\n        }\r\n        return 0;\r\n      });\r\n    }\r\n    case SortingTypes.TRANSLATION: {\r\n      if (sortingType.sortFromTop) {\r\n        // TODO: optimize\r\n        return unsortedList.sort((a, b) => {\r\n          const prevName = a.translation.toLowerCase();\r\n          const nextName = b.translation.toLowerCase();\r\n          if (prevName < nextName) {\r\n            return -1;\r\n          }\r\n          if (prevName > nextName) {\r\n            return 1;\r\n          }\r\n          return 0;\r\n        });\r\n      }\r\n      return unsortedList.sort((a, b) => {\r\n        const prevName = a.translation.toLowerCase();\r\n        const nextName = b.translation.toLowerCase();\r\n        if (prevName > nextName) {\r\n          return -1;\r\n        }\r\n        if (prevName < nextName) {\r\n          return 1;\r\n        }\r\n        return 0;\r\n      });\r\n    }\r\n    case SortingTypes.ASKED: {\r\n      return unsortedList.sort((a, b) =>\r\n        sortingType.sortFromTop ? a.asked - b.asked : b.asked - a.asked\r\n      );\r\n    }\r\n    case SortingTypes.TRAIN: {\r\n      return unsortedList.sort((a, b) =>\r\n        sortingType.sortFromTop ? a.train - b.train : b.train - a.train\r\n      );\r\n    }\r\n    case SortingTypes.HIT: {\r\n      return unsortedList.sort((a, b) =>\r\n        sortingType.sortFromTop ? a.hit - b.hit : b.hit - a.hit\r\n      );\r\n    }\r\n    case SortingTypes.WRONG: {\r\n      return unsortedList.sort((a, b) =>\r\n        sortingType.sortFromTop ? a.wrong - b.wrong : b.wrong - a.wrong\r\n      );\r\n    }\r\n    case SortingTypes.WRONG_PERCENT: {\r\n      return unsortedList.sort((a, b) =>\r\n        sortingType.sortFromTop\r\n          ? a.wrongPercent - b.wrongPercent\r\n          : b.wrongPercent - a.wrongPercent\r\n      );\r\n    }\r\n    default: {\r\n      return unsortedList;\r\n    }\r\n  }\r\n};\r\n\r\nexport default sortTable;\r\n","import React, { ReactElement, useState } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport TableCell from './TableCell/TableCell';\r\nimport { IWordStatisticData } from '../../../shared/interfaces/api-models';\r\nimport {\r\n  CardsReducerType,\r\n  StatisticReducerType,\r\n} from '../../../shared/interfaces/store-models';\r\nimport { ICardItem } from '../../../shared/interfaces/cards-models';\r\nimport capitalizeWord from '../../../shared/helpersFunction/capitalizeWord';\r\nimport TableHeader from './TableHeader/TableHeader';\r\nimport {\r\n  TABLE_BODY_STYLES,\r\n  TABLE_ROW_STYLES,\r\n  TABLE_STYLES,\r\n  TABLE_TITLE_STYLES,\r\n} from '../../../shared/stylesVariables';\r\nimport tableHeaders from '../../../shared/globalVariables';\r\nimport sortTable from '../../../shared/helpersFunction/sortTable';\r\n\r\nconst calcWrongPercent = (\r\n  askedAnswers: number,\r\n  trueAnswers: number\r\n): number => {\r\n  return Math.floor((askedAnswers * 100) / trueAnswers);\r\n};\r\n\r\nconst StatisticsTable = (): ReactElement => {\r\n  const { cards: cardsData } = useSelector(\r\n    (state: CardsReducerType) => state.cardsReducer\r\n  );\r\n  const { statisticsData } = useSelector(\r\n    (state: StatisticReducerType) => state.statisticReducer\r\n  );\r\n  const [sortingType, setSortingType] = useState({\r\n    sortBy: '',\r\n    sortFromTop: false,\r\n  });\r\n\r\n  const statisticsParams: IWordStatisticData[] = cardsData\r\n    .map((cardsDataItem) => {\r\n      const category = Object.keys(cardsDataItem).toString();\r\n      const cards: ICardItem[] = Object.values(cardsDataItem)[0];\r\n\r\n      return cards.map((card) => {\r\n        const parsedData =\r\n          statisticsData[capitalizeWord(card.name)] &&\r\n          JSON.parse(statisticsData[capitalizeWord(card.name)]);\r\n\r\n        return {\r\n          wordName: card.name,\r\n          translation: card.translate,\r\n          asked: (parsedData && parsedData.askedCounter) || 0,\r\n          train: (parsedData && parsedData.trainCounter) || 0, // TODO: to do rename\r\n          hit: (parsedData && parsedData.trueAnswerCounter) || 0,\r\n          wrong: (parsedData && parsedData.falseAnswerCounter) || 0,\r\n          wrongPercent:\r\n            (parsedData &&\r\n              calcWrongPercent(\r\n                parsedData.falseAnswerCounter,\r\n                parsedData.trueAnswerCounter\r\n              )) ||\r\n            0,\r\n          category,\r\n        };\r\n      });\r\n    })\r\n    .flat();\r\n\r\n  const selectSorting = (sortingTypeName: string) => {\r\n    setSortingType({\r\n      sortBy: sortingTypeName,\r\n      sortFromTop: !sortingType.sortFromTop, // TODO: to do nice sort\r\n    });\r\n  };\r\n\r\n  return (\r\n    <table className={TABLE_STYLES}>\r\n      <thead>\r\n        <tr className={TABLE_ROW_STYLES}>\r\n          <th className={TABLE_TITLE_STYLES}>№</th>\r\n          {tableHeaders.map((tableHeaderContent) => (\r\n            <TableHeader\r\n              key={tableHeaderContent.type}\r\n              selectedSortingType={sortingType.sortBy} // TODO: to do smth\r\n              content={tableHeaderContent}\r\n              selectSorting={selectSorting}\r\n            />\r\n          ))}\r\n        </tr>\r\n      </thead>\r\n      <tbody className={TABLE_BODY_STYLES}>\r\n        {sortTable(statisticsParams, sortingType).map((elem, index) => (\r\n          <TableCell key={index.toString()} word={elem} index={index + 1} />\r\n        ))}\r\n      </tbody>\r\n    </table>\r\n  );\r\n};\r\n\r\nexport default StatisticsTable;\r\n","import React, { ReactElement, useEffect } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport StatisticsTable from './StatisticsTable/StatisticsTable';\r\nimport Title from '../../shared/baseComponents/Title/Title';\r\nimport {\r\n  BUTTON_STYLES,\r\n  BUTTONS_WRAPPER_STYLES,\r\n  STATISTICS_HEADER_STYLES,\r\n  TABLE_WRAPPER_STYLES,\r\n} from '../../shared/stylesVariables';\r\nimport { getStatistics } from '../../store/statisticSlice';\r\n\r\nconst Statistics = (): ReactElement => {\r\n  const dispatch = useDispatch();\r\n  useEffect(() => {\r\n    dispatch(getStatistics());\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <div className={STATISTICS_HEADER_STYLES}>\r\n        <Title>Statistics</Title>\r\n        <div className={BUTTONS_WRAPPER_STYLES}>\r\n          <button className={BUTTON_STYLES} type=\"button\">\r\n            Repeat difficult words\r\n          </button>\r\n          <button className={BUTTON_STYLES} type=\"button\">\r\n            Clear list\r\n          </button>\r\n        </div>\r\n      </div>\r\n      <div className={TABLE_WRAPPER_STYLES}>\r\n        <StatisticsTable />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Statistics;\r\n"],"sourceRoot":""}